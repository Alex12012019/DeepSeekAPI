class ChatApp {
    constructor() {
        this.currentChat = this.createNewChat();
        this.autoSaveInterval = null;
        this.initElements();
        this.bindEvents();
        this.loadConversations();
        this.startAutoSave();
        this.initFileUpload();
        
        document.getElementById('file-upload').addEventListener('change', (e) => {
            if (e.target.files[0]) this.handleFileUpload(e.target.files[0]);
        });

        this.initLoader();
        this.initFileUpload();
        this.currentUploadAbortController = null;
        //this.renderMessages = this.renderMessages.bind(this);
    }

    createNewChat() {
        return {
            id: 'tmp-' + Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤
            name: "–ù–æ–≤—ã–π —á–∞—Ç",
            messages: [],
            isNew: true
        };
    }
    
    initElements() {
        this.elements = {
            chatContainer: document.getElementById('chat-container'),
            userInput: document.getElementById('user-input'),
            sendButton: document.getElementById('send-button'),
            conversationList: document.getElementById('conversation-list'),
            newChatBtn: document.getElementById('new-chat'),
        };
    }

    bindEvents() {
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => this.handleDocumentClick(e));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.elements.sendButton.addEventListener('click', () => this.sendMessage());
        this.elements.userInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // –ù–æ–≤—ã–π —á–∞—Ç
        this.elements.newChatBtn.addEventListener('click', () => this.newChat());

        this.elements.saveButton = document.getElementById('save-chat');
        this.elements.saveButton.addEventListener('click', () => this.saveChat());

    }

    handleDocumentClick(e) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
        if (e.target.closest('.delete-btn')) {
            const item = e.target.closest('.conversation-item');
            if (item) {
                this.deleteChat(item.dataset.id);
            }
            return;
        }

        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        if (e.target.closest('.rename-btn')) {
            const item = e.target.closest('.conversation-item');
            if (item) {
                this.showRenameDialog(item.dataset.id);
            }
            return;
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞
        if (e.target.closest('.conversation-item') && !e.target.closest('.conv-actions')) {
            const item = e.target.closest('.conversation-item');
            if (item) {
                this.loadChat(item.dataset.id);
            }
        }

    }

    async sendMessage() {
        const text = this.elements.userInput.value.trim();
        if (!text) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.setLoadingState(true);
        this.addMessage('user', text);
        this.elements.userInput.value = '';

        try {
            const response = await fetch('/api/send_message', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    message: text,
                    messages: this.currentChat?.messages || []
                })
            });

            if (!response.ok) throw new Error('Network error');
            
            const data = await response.json();
            this.addMessage('assistant', data.assistant_reply);
            
            if (this.currentChat) {
                this.currentChat.messages = data.messages;
            }
        } catch (error) {
            this.addMessage('assistant', `–û—à–∏–±–∫–∞: ${error.message}`, false);
            console.error('Send message error:', error);
        } finally {
            this.setLoadingState(false);
        }
    }

    setLoadingState(isLoading) {
        if (isLoading) {
            this.elements.sendButton.disabled = true;
            this.elements.sendButton.innerHTML = '<div class="spinner"></div>';
        } else {
            this.elements.sendButton.disabled = false;
            this.elements.sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        }
    }

    // 2. –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    addMessage(role, content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}-message`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.innerHTML = marked.parse(content);
        
        messageDiv.appendChild(contentDiv);
        this.elements.chatContainer.appendChild(messageDiv);
        this.elements.chatContainer.scrollTop = this.elements.chatContainer.scrollHeight;
    }

    addCopyButton(container, text) {
        const btn = document.createElement('button');
        btn.className = 'copy-btn';
        btn.innerHTML = 'üìã';
        btn.title = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
        btn.addEventListener('click', () => {
            navigator.clipboard.writeText(text);
            btn.innerHTML = '‚úì';
            setTimeout(() => btn.innerHTML = 'üìã', 2000);
        });
        container.appendChild(btn);
    }

    async loadConversations() {
        try {
            const response = await fetch('/api/get_conversations');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            
            const data = await response.json();
            console.log("Loaded conversations:", data); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            this.renderConversationList(data);
        } catch (error) {
            console.error("Load conversations error:", error);
            this.showError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤");
        }
    }

    renderConversationList(conversations) {
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    this.elements.conversationList.innerHTML = '';

    if (conversations.length === 0) {
        this.elements.conversationList.innerHTML = `
            <div class="no-conversations">
                –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            </div>
        `;
        return;
    }

    conversations.forEach(conv => {
            const item = document.createElement('div');
            item.className = 'conversation-item';
            item.dataset.id = conv.filename;
            
            item.innerHTML = `
                <div class="conv-content">
                    <div class="conv-name">${conv.name}</div>
                    <div class="conv-date">${new Date(conv.date).toLocaleString()}</div>
                </div>
                <div class="conv-actions">
                    <button class="rename-btn" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
            `;
            
            this.elements.conversationList.appendChild(item);
        });
    }

    async deleteChat(chatId) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥?')) return;
        
        try {
            const response = await fetch(`/api/delete_chat/${chatId}`, { 
                method: 'POST' 
            });
            
            if (!response.ok) throw new Error('Delete failed');
            
            if (this.currentChat?.id === chatId) {
                this.currentChat = null;
                this.elements.chatContainer.innerHTML = '';
            }
            this.loadConversations();
        } catch (error) {
            console.error('Delete chat error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
    }

    async showRenameDialog(chatId) {
        const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:');
        if (!newName?.trim()) return;

        try {
            const response = await fetch(`/api/rename_chat/${chatId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ new_name: newName.trim() })
            });
            
            if (!response.ok) throw new Error('Rename failed');
            
            this.loadConversations();
        } catch (error) {
            console.error('Rename chat error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏');
        }
    }

    startAutoSave() {
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.autoSaveInterval = setInterval(() => {
            if (this.currentChat?.messages?.length > 0) {
                this.saveChat(false); // silent mode
            }
        }, 30000);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
        window.addEventListener('beforeunload', (e) => {
            if (this.currentChat?.messages?.length > 0) {
                this.saveChat(false);
            }
        });
    }

    showStatusMessage(text, duration) {
        const status = document.createElement('div');
        status.className = 'status-message';
        status.textContent = text;
        document.body.appendChild(status);
        setTimeout(() => status.remove(), duration);
    }

    async saveChat(showAlert = true) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (!this.currentChat.messages?.length) {
                if (showAlert) alert('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                return;
            }

            // –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
            if (this.currentChat.isNew) {
                const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:", this.currentChat.name);
                if (!newName) return; // –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                this.currentChat.name = newName;
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/save_conversation', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: this.currentChat.messages,
                    filename: this.currentChat.isNew ? null : this.currentChat.id,
                    name: this.currentChat.name
                })
            });

            const data = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ (–≤–∞–∂–Ω–æ –î–û –ø–æ–∫–∞–∑–∞ alert)
            this.currentChat = {
                id: data.filename,
                name: data.name,
                messages: this.currentChat.messages,
                isNew: false
            };

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if (showAlert) {
                alert(this.currentChat.isNew ? "–ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω" : "–ß–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω");
            }

            this.loadConversations();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            if (showAlert) alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
        }
    }

    newChat() {
        if (!this.currentChat.messages.length || confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç? –ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            this.currentChat = this.createNewChat();
            this.elements.chatContainer.innerHTML = '';
        }
    }

    async loadChat(chatId) {
        try {
            const response = await fetch(`/api/load_conversation/${chatId}`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            
            const data = await response.json();
            
            // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.currentChat = {
                id: chatId,
                name: data.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                messages: data.messages || [],
                isNew: false
            };
            
            // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            this.elements.chatContainer.innerHTML = '';
            this.currentChat.messages.forEach(msg => {
                this.addMessage(msg.role, msg.content);
            });
            
        } catch (error) {
            console.error('Load error:', error);
            this.addMessage('system', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
        }
    }

/// ***************** –Ω–æ–≤–æ–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ *******************************    
    async analyzeContent(source) {
        try {
            this.showLoader(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            
            const response = await fetch('/api/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ source })
            });
            
            const data = await response.json();
            
            if (data.status === 'success') {
                // –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                const chunkSize = 15000; // –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                for (let i = 0; i < data.content.length; i += chunkSize) {
                    const chunk = data.content.slice(i, i + chunkSize);
                    this.addMessage('system', `–ê–Ω–∞–ª–∏–∑ (—á–∞—Å—Ç—å ${i/chunkSize + 1}):\n${chunk}`);
                    await new Promise(resolve => setTimeout(resolve, 100)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                }
            } else {
                alert(`–û—à–∏–±–∫–∞: ${data.error}`);
            }
        } catch (error) {
            console.error('Analysis error:', error);
            alert('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
        } finally {
            this.showLoader(false);
        }
    }

    initFileUpload() {
        const fileInput = document.getElementById('file-upload');
        
        fileInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            try {
                this.showLoader(true);
                
                // 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                const content = await this.readFileContent(file);
                
                // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ DeepSeek API
                const analysisResult = await this.analyzeWithDeepSeek(content);
                
                // 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                this.addMessage('system', `–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ ${file.name}:\n${analysisResult}`);
                
            } catch (error) {
                console.error('File processing error:', error);
                alert('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞');
            } finally {
                this.showLoader(false);
                fileInput.value = ''; // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            }
        });
    }

    async analyzeWithDeepSeek(content) {
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ API (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        const response = await fetch('/api/send_message', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª:\n${content.slice(0, 15000)}`, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                messages: this.currentChat.messages
            })
        });
        
        const data = await response.json();
        return data.assistant_reply;
    }

    async readFileContent(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"));
            
            if (file.type.includes('text/') || 
                ['.txt', '.csv', '.json', '.log'].some(ext => file.name.endsWith(ext))) {
                reader.readAsText(file);
            } else {
                reader.readAsDataURL(file); // –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            }
        });
    }

    initLoader() {
        this.loader = document.getElementById('loader');
        this.fileProgress = document.getElementById('file-progress');
        this.fileInfo = document.getElementById('file-info');
    }

    showLoader(show) {
        this.loader.style.display = show ? 'block' : 'none';
    }

    updateProgress(percent) {
        this.fileProgress.value = percent;
        this.fileInfo.style.display = percent > 0 ? 'block' : 'none';
    }

    async newChat() {
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
        if (this.currentUploadAbortController) {
            this.currentUploadAbortController.abort();
            this.currentUploadAbortController = null;
        }

        if (!this.currentChat?.messages?.length || confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç? –ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            this.currentChat = this.createNewChat();
            this.elements.chatContainer.innerHTML = '';
            this.updateFileInfo('', 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        }
    }

    async handleFileUpload(file) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
            this.currentUploadAbortController = new AbortController();
            
            this.showLoader(true);
            this.updateFileInfo(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${file.name}...`, 20);

            // 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            const content = await this.readFileContent(file);
            this.updateFileInfo(`–ê–Ω–∞–ª–∏–∑ ${file.name}...`, 50);

            // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/analyze_file', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    filename: file.name,
                    content: content,
                    chat_id: this.currentChat.id // –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                }),
                signal: this.currentUploadAbortController.signal
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞');
            }

            const result = await response.json();
            this.updateFileInfo(`–ì–æ—Ç–æ–≤–æ!`, 100);

            // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
            this.addMessage('assistant', `–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ "${file.name}":\n${result.analysis}`);

        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã
            if (error.name !== 'AbortError') {
                console.error('File upload error:', error);
                this.addMessage('system', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "${file.name}": ${error.message}`);
            }
        } finally {
            this.currentUploadAbortController = null;
            setTimeout(() => {
                this.updateFileInfo('', 0);
                this.showLoader(false);
            }, 1000);
        }
    }

    readFileAsDataURL(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª'));
            reader.readAsDataURL(file);
        });
    }

    async sendToAnalysisAPI(fileData) {
        const response = await fetch('/api/analyze_file', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(fileData)
        });

        if (!response.ok) {
            const error = await response.text();
            throw new Error(error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        return await response.text(); // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
    }

    addRawMessage(role, content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}-message`;
        messageDiv.textContent = content; // –ò—Å–ø–æ–ª—å–∑—É–µ–º textContent –≤–º–µ—Å—Ç–æ marked.parse
        this.elements.chatContainer.appendChild(messageDiv);
        this.elements.chatContainer.scrollTop = this.elements.chatContainer.scrollHeight;
    } 


    updateFileInfo(text = '', percent = 0) {
        const fileNameEl = document.getElementById('file-name');
        const fileProgressEl = document.getElementById('file-progress');
        const fileInfoEl = document.getElementById('file-info');
        
        fileNameEl.textContent = text;
        fileProgressEl.value = percent;
        fileInfoEl.style.display = text ? 'block' : 'none';
    }

}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    try {
        window.app = new ChatApp();
    } catch (e) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ChatApp: " + e.message);
    }
});