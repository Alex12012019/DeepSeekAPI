import { ChatManager } from './ChatManager.js';

class ChatApp {
    constructor() {
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
            this.checkRequiredElements();
            
            // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.ActiveChatId = null;
            this.autoSaveInterval = null;
            this.currentUploadAbortController = null;
            this.elements = this.initElements();
            
            // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.bindEvents();
            
            // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            this.initLoader();  // –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            this.initFileUpload();
            
            // 5. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            this.manager = null;
            this.loadConversations();
            
            console.log("ChatApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatApp:", error);
            throw error;
        }
    }

    // ==================== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ====================
    initLoader() {
        this.elements.loader = document.getElementById('loader');
        this.elements.fileProgress = document.getElementById('file-progress');
        this.elements.fileName = document.getElementById('file-name');
        this.elements.fileInfo = document.getElementById('file-info');
        
        if (!this.elements.loader) {
            console.warn("–≠–ª–µ–º–µ–Ω—Ç #loader –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }

    initFileUpload() {
        this.elements.fileUpload = document.getElementById('file-upload');
        if (!this.elements.fileUpload) {
            console.warn("–≠–ª–µ–º–µ–Ω—Ç #file-upload –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }

    checkRequiredElements() {
        const requiredElements = [
            'chat-container', 'conversation-list',
            'user-input', 'send-button'
        ];
        
        const missingElements = requiredElements.filter(id => !document.getElementById(id));
        
        if (missingElements.length > 0) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${missingElements.join(', ')}`);
        }
    }

    initElements() {
        return {
            chatContainer: document.getElementById('chat-container'),
            userInput: document.getElementById('user-input'),
            sendButton: document.getElementById('send-button'),
            conversationList: document.getElementById('conversation-list'),
            newChatBtn: document.getElementById('new-chat'),
            saveButton: document.getElementById('save-chat'),
            fileUpload: document.getElementById('file-upload'),
            loader: document.getElementById('loader'),
            fileProgress: document.getElementById('file-progress'),
            fileName: document.getElementById('file-name'),
            fileInfo: document.getElementById('file-info')
        };
    }

    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        this.elements.sendButton.addEventListener('click', () => this.sendMessage());
        this.elements.userInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                if (!this.elements.sendButton.disabled) {
                    this.sendMessage();
                }
            }
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
        this.elements.newChatBtn.addEventListener('click', () => this.newChat());
        this.elements.saveButton.addEventListener('click', () => this.saveChat());

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        this.elements.fileUpload.addEventListener('change', (e) => {
            if (e.target.files[0]) this.handleFileUpload(e.target.files[0]);
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        //this.startAutoSave();

        this.elements.conversationList.addEventListener('click', (event) => this.DoAction(event));
    }

    // ==================== –†–ê–ë–û–¢–ê –° –ß–ê–¢–ê–ú–ò ====================
    async loadConversations() {
        try {
            const response = await fetch('/api/get_conversations');

            console.log("response:", response);

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            
            console.log("Raw API response:", data); // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç

            // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            if (!data || typeof data !== 'object') {
                throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            const conversations = data || [];

            if (!Array.isArray(conversations)) {
                throw new Error("–î–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
            }
            
            this.manager = new ChatManager();
            this.ActiveChatId = null;
            this.manager.loadChats(conversations);
            this.renderConversationList();
            
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤:", error);
            this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤");
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.renderConversationList();
        }
    }

    renderConversationList() {

        const container = this.elements.conversationList;
        if (!container) return;

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';
        
        const conversations = this.manager.getChatList();

        // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç
        if (!conversations || conversations.length === 0) {
            container.innerHTML = '<div class="no-conversations">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤</div>';
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
        conversations.forEach(chat => {
            const chatId = chat.id;
            const chatName = chat.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            const chatUpdated = chat.updated || new Date().toISOString();

            const item = document.createElement('div');
            item.className = 'conversation-item';
            item.dataset.id = chatId;
            item.dataset.fileName = chat.filename;
            
            item.innerHTML = `
                <div class="conversation" data-chat-id="${chatId}">
                    <div class="conv-content">
                        <div class="conv-name">${chatName}</div>
                        <div class="conv-date">${new Date(chatUpdated).toLocaleString()}</div>
                    </div>
                    <div class="conv-actions">
                        <button class="rename-btn">‚úèÔ∏è</button>
                        <button class="delete-btn">üóëÔ∏è</button>
                    </div>
                </div>
            `;
            
            container.appendChild(item);
        });
    }

    async deleteChat(fileName) {
        if (this.isOne) return;
        this.isOne = true;

        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥?')) {
            this.isOne = false;
            return;
        }
        
        try {
            const response = await fetch(`/api/delete_chat/${fileName}`, { 
                method: 'POST' 
            });
            
            if (!response.ok) throw new Error('Delete failed');
            
            this.currentChat = null;
            this.elements.chatContainer.innerHTML = '';

            this.loadConversations();
        } catch (error) {
            console.error('Delete chat error:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
        this.isOne = false;
    }

    async DoAction(event) {

        const item = event.target.closest('.conversation-item');
        if (!item) return;

        // –ü–æ–ª—É—á–∞–µ–º chatId
        const convBlock = item.querySelector('.conversation');
        const chatId = convBlock?.dataset?.chatId;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const fileName = item.dataset?.fileName; // –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ "data--file-name", –∞ "fileName"

        console.log('chatId:', chatId);
        console.log('fileName:', fileName);

        if (event.target.closest('.rename-btn') || event.target.closest('.delete-btn')) {
            if (event.target.closest('.rename-btn')) {
                    const chatId = convBlock?.dataset?.chatId;
                    const currentName = this.manager.loadChatById(chatId)?.name || '';
                    this.renameChat(chatId, currentName);
                return;
            }
            if (event.target.closest('.delete-btn')) {
                await this.deleteChat(fileName);
                return;
            }
        }

        this.ActiveChatId = chatId;
        this.loadChat();
    }


    loadChat() {
        try {

            // –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            this.elements.chatContainer.innerHTML = '';
            this.elements.userInput.value = "";
            
            const activeChat = this.manager.loadChatById(this.ActiveChatId);
            console.error("–¢–µ–∫—É—â–∏–π —á–∞—Ç Id:", this.ActiveChatId);
            console.error("–¢–µ–∫—É—â–∏–π —á–∞—Ç:", activeChat.messages);

            const titleElement = document.getElementById('chat-title');
            titleElement.textContent = activeChat.name;
            
            activeChat.messages.forEach((msg, index) =>{
                this.addMessage(msg.role, msg.content);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            //if (data.fileAnalysis?.length) {
            //    data.fileAnalysis.forEach(file => {
            //        this.addMessage('assistant', `[–§–∞–π–ª] ${file.name}:\n${file.content}`);
            //    });
            //}

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:", error);
            this.showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç: ${error.message}`);
        }
    }

    async saveChat(showAlert = true) {
        try {
            const activeChat = this.manager.loadChatById(this.ActiveChatId);
            
            if (!activeChat) {
                if (showAlert) alert("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —á–∞—Ç—ã
            if (!activeChat.isEdit && activeChat.messages.length > 0) {
                if (showAlert) alert("–ß–∞—Ç –Ω–µ –º–µ–Ω—è–ª—Å—è");
                return;
            }

            if (activeChat.messages.length === 0) {
                if (showAlert) alert("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
                return;
            }

            // –î–ª—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            if (activeChat.isNew) {
                const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:", activeChat.name);
                if (!newName) return;
                activeChat.name = newName.trim();
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/save_conversation', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(activeChat.toJSON())
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${response.status}`);
            }

            const result = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            await this.loadConversations();
            
            if (showAlert) alert("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω");

            this.ActiveChatId = result.id;
            this.loadChat();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞:", error);
            this.showError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    }

    async newChat() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        try {
            const currentChat = this.manager.loadChatById(this.ActiveChatId);
            if (currentChat?.isEdit) {
                if (!confirm("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç? –ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.")) {
                    return;
                }
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞:", error);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞:");
        }

        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.currentUploadAbortController) {
            this.currentUploadAbortController.abort();
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç
        const chat = this.manager.createChat("–ù–æ–≤—ã–π —á–∞—Ç");
        this.ActiveChatId = chat.id;
        this.renderConversationList();
        this.loadChat();
    }

    async renameChat(chatId, currentName) {
        try {
            const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:", currentName);
            
            if (!newName || newName.trim() === currentName) {
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∏–ª–∏ –æ—Å—Ç–∞–≤–∏–ª –ø—Ä–µ–∂–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —á–∞—Ç–æ–≤
            const chat = this.manager.loadChatById(chatId);
            if (chat) {
                chat.name = newName.trim();
                chat.isEdit = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
                
                // –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–Ω–µ –Ω–æ–≤—ã–π), –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                if (!chat.isNew) {
                    await this.saveChat(false); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.renderConversationList();
                
                // –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (this.ActiveChatId === chatId) {
                    const titleElement = document.getElementById('chat-title');
                    if (titleElement) {
                        titleElement.textContent = newName.trim();
                    }
                }
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞:", error);
            this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç");
        }
    }

    // ==================== –†–ê–ë–û–¢–ê –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò ====================

    async sendMessage() {
        const messageText = this.elements.userInput.value.trim();
        
        if (!messageText) return;
        
       
        try {

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.setLoadingState(true);

            if (!this.manager.addMessageToChat(this.ActiveChatId, "user", messageText)) {
                alert("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!!!")
                this.setLoadingState(false); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return;
            }

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            this.elements.userInput.value = "";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/send_message', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: this.manager.loadChatById(this.ActiveChatId).messages,
                    chatId: this.ActiveChatId
                })
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            const data = await response.json();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            this.manager.addMessageToChat(this.ActiveChatId, "assistant", data.assistant_reply)

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            this.manager.addMessageToChat(this.ActiveChatId, "assistant", `–û—à–∏–±–∫–∞: ${error.message}`)
            
        } finally {
            this.setLoadingState(false);
            this.loadChat();
        }
    }

    addMessage(role, content, isMarkdown = true) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}-message`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.innerHTML = isMarkdown ? marked.parse(content) : content;
        
        messageDiv.appendChild(contentDiv);
        this.elements.chatContainer.appendChild(messageDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if (role === 'assistant') {
            this.addCopyButton(messageDiv, content);
        }
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        this.elements.chatContainer.scrollTop = this.elements.chatContainer.scrollHeight;
    }

    addCopyButton(container, text) {
        const btn = document.createElement('button');
        btn.className = 'copy-btn';
        btn.innerHTML = 'üìã';
        btn.title = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç';
        
        btn.addEventListener('click', () => {
            navigator.clipboard.writeText(text)
                .then(() => {
                    btn.innerHTML = '‚úì';
                    setTimeout(() => btn.innerHTML = 'üìã', 2000);
                })
                .catch(err => console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", err));
        });
        
        container.appendChild(btn);
    }

    // ==================== –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò ====================

    async handleFileUpload(file) {
        if (!this.validateFile(file)) return;

        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            this.currentUploadAbortController = new AbortController();
            this.showLoader(true);
            this.updateFileInfo(`–ó–∞–≥—Ä—É–∑–∫–∞ ${file.name}...`, 20);

            // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            const fileContent = await this.readFileContent(file);
            this.updateFileInfo(`–û–±—Ä–∞–±–æ—Ç–∫–∞...`, 50);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑
            const analysisResult = await this.analyzeFile(file, fileContent);
            this.updateFileInfo(`–ì–æ—Ç–æ–≤–æ!`, 100);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
            this.addFileAnalysisResult(file, analysisResult);

        } catch (error) {
            if (error.name !== 'AbortError') {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:", error);
                this.addMessage('system', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
            }
        } finally {
            this.finalizeFileUpload();
        }
    }

    validateFile(file) {
        const MAX_SIZE = 10 * 1024 * 1024; // 10MB
        const allowedTypes = [
            'text/plain', 
            'application/pdf', 
            'application/json'
        ];

        if (file.size > MAX_SIZE) {
            this.showError(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º ${MAX_SIZE/1024/1024}MB)`);
            return false;
        }

        if (!allowedTypes.includes(file.type)) {
            this.showError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞");
            return false;
        }

        return true;
    }

    readFileContent(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"));
            
            if (file.type === 'application/pdf') {
                reader.readAsDataURL(file);
            } else {
                reader.readAsText(file);
            }
        });
    }

    async analyzeFile(file, content) {
        const response = await fetch('/api/analyze_file', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                filename: file.name,
                content: content,
                chatId: this.currentChat.id
            }),
            signal: this.currentUploadAbortController.signal
        });

        if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(error.message || "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞");
        }

        return await response.json();
    }

    addFileAnalysisResult(file, result) {
        const fileMessage = {
            role: 'assistant',
            content: `–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ "${file.name}":\n${result.analysis}`,
            isFileAnalysis: true,
            fileMeta: {
                name: file.name,
                size: file.size,
                type: file.type,
                analysisDate: new Date().toISOString()
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        this.currentChat.messages.push(fileMessage);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        this.currentChat.fileAnalysis.push({
            name: file.name,
            content: result.analysis
        });

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —á–∞—Ç–µ
        this.addMessage(fileMessage.role, fileMessage.content);
    }

    finalizeFileUpload() {
        if (this.currentUploadAbortController) {
            this.currentUploadAbortController.abort();
            this.currentUploadAbortController = null;
        }

        setTimeout(() => {
            this.updateFileInfo('', 0);
            this.showLoader(false);
            this.elements.fileUpload.value = '';
        }, 1000);
    }

    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    startAutoSave() {
        this.autoSaveInterval = setInterval(() => {
            if (this.currentChat.messages.length > 0) {
                this.saveChat(false); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            }
        }, 300000); // –ö–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥

        window.addEventListener('beforeunload', () => {
            if (this.currentChat.messages.length > 0) {
                this.saveChat(false);
            }
        });
    }

    setLoadingState(isLoading) {
        const btn = this.elements.sendButton;
        btn.disabled = isLoading;
        
        if (isLoading) {
            btn.classList.add('loading');
            btn.innerHTML = '<span class="spinner"></span> –û—Ç–ø—Ä–∞–≤–∫–∞...';
        } else {
            btn.classList.remove('loading');
            btn.innerHTML = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        }
    }

    showLoader(show) {
        this.elements.loader.style.display = show ? 'block' : 'none';
    }

    updateFileInfo(text = '', percent = 0) {
        this.elements.fileName.textContent = text;
        this.elements.fileProgress.value = percent;
        this.elements.fileInfo.style.display = text ? 'block' : 'none';
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            errorDiv.remove();
        }, 5000);
    }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    try {
        window.app = new ChatApp();
    } catch (error) {
        console.error("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #ffebee;
            color: #c62828;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 1000;
            max-width: 80%;
            text-align: center;
        `;
        errorDiv.innerHTML = `
            <h3 style="margin-top:0">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞</h3>
            <p>${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}</p>
            <button onclick="window.location.reload()" 
                    style="background:#c62828; color:white; border:none; padding:5px 10px; border-radius:3px; margin-top:10px;">
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
        `;
        
        document.body.appendChild(errorDiv);
    }
})